kernel void vecinit(global float * out, int n)
{
  const int i = get_global_id(0);
  if (i<n) out[i] = (i+1);
}

kernel void scan1(global int * restrict out, global const int * restrict in, local int* restrict lmem, uint nels)
{
  const uint gws = get_global_size(0);
  const uint lws = get_local_size(0);
  const uint li = get_local_id(0);
  uint gi = get_global_id(0);
  int corr = 0;

  uint limit = ((nels+lws-1)/lws)*lws;

  // while (gi < nels) // questo ciclo Ã¨ sbagliato, nel momento in cui il mio wg si trova a fare l'ultimo pezzo dei work item non finiranno.
  while (gi < limit) 
  {
    int acc = (gi < nels ? in[gi] : 0);  // starting data is stored in the registers
    
    uint write_mask = ~1U;
    uint read_mask = ~0U;

    lmem[li] = acc;      //Data now in local memory, the others can read the contents. One element per work-item
    while(write_mask < lws) // "srotolare sempre il while una/due volte"
    {
      barrier(CLK_LOCAL_MEM_FENCE);
      if (li & write_mask)
      {
        acc+= lmem[(li & read_mask) -1];
        lmem[li] = acc;
      }
      write_mask <<= 1;
      read_mask <<= 1;
    }
    acc+=corr;
    if (gi < nels) out[gi] = acc;

    barrier(CLK_LOCAL_MEM_FENCE);
    corr+=lmem[lws-1];
    gi+= get_local_size(0);

    // ensure that lmem[i] on the next cycle from the last work-item
    // doesn't overwrite lmem[lws-1] before all other work-items have read it.
    barrier(CLK_LOCAL_MEM_FENCE);
  }
  // barrier(CLK_LOCAL_MEM_FENCE);
  /* if(i % 1 << 0) // lavorano i work-item: 1, 3, 5, 7, 9, 11... (dispari)
  {
    acc += lmem[i-1];
    lmem[i] = acc;
  }

  barrier(CLK_LOCAL_MEM_FENCE);   //sync
  
  //&2:   Toglie gli ultimi bit 
  // -1: elemento precedente
  //i>>2: indice del blocchetto in qui ci troviamo

  uint mask= ~1U; // negato
  if (i & (1 << 1)) // lavorano i work-item: 2 3, 6 7, 10 11, 14 15
    acc+=lmem[(i & mask) - 1];
  mask = mask << 1;
  barrier(CLK_LOCAL_MEM_FENCE);

  if (i & (i << 2)) // lavorano: 4 5 6 7, 12 13 14 15, 20 21 22 23, 28,29,30,31
    acc+=lmem[(i & mask)-1];   
  barrier(CLK_LOCAL_MEM_FENCE);
  if (i & (1 << 3)) 
    acc+=lmem[(i & mask)-1];
  if (i & (1 << 4)) 
    acc+=lmem[((i>>4)<<4)-1];
  */
}