kernel void vecinit( global int * restrict v1, global int * restrict v2, int nels)
{
	const int i = get_global_id(0);
	
    if(i>=nels)  return; //workitem di troppo ritornano subito, ma con gestione manuale dopo...

    v1[i] = i;
	v2[i] = nels - i;
}

// Performance normale
kernel void vecsum( global int * restrict vsum, global const int * restrict v1, global const int * restrict v2, int nels)
{
	const int i = get_global_id(0);

    if(i>=nels)  return;

	vsum[i] = v1[i] + v2[i];
}

// Il migliore
kernel void vecsum4( global int4 * restrict vsum, global const int4 * restrict v1, global const int4 * restrict v2, int nquarts)
{	// Funziona meglio anche se hardware di calcolo è scalare perché il controller di memoria è fatto per Float4 (quindi codice vettorizzato)
	const int i = get_global_id(0);

    if(i>=nquarts)  return;

	vsum[i] = v1[i] + v2[i];
}

// Peggiore di 4
kernel void vecsum8( global int8 * restrict vsum, global const int8 * restrict v1, global const int8 * restrict v2, int noct)
{
	const int i = get_global_id(0);

    if(i>=noct)  return;

	vsum[i] = v1[i] + v2[i];
}

// lavoro su 4 int4 alla volta, vedi esempio sotto
// operazioni 0123 0123, 4567 4567, ... funzionano bene solo con warp/wavefrom/subgroup di size 32
// e conoscendo a priori la dimensione del warp/wavefrom/subgroup 
kernel void vecsum4x4( global int4 * restrict vsum, global const int4 * restrict v1, global const int4 * restrict v2, int nhex)
{	
	const int i = get_global_id(0);
	const int gws = get_global_size(0);

  if(i>=nhex)  return;

	// load=> load=> load=> load=> sum.
	int4 a0 = v1[i+0*gws];
	int4 a1 = v1[i+1*gws];
	int4 a2 = v1[i+2*gws];
	int4 a3 = v1[i+3*gws];

	int4 b0 = v2[i+0*gws];
	int4 b1 = v2[i+1*gws];
	int4 b2 = v2[i+2*gws];
	int4 b3 = v2[i+3*gws];
	
	a0+=b0;
	a1+=b1;
	a2+=b2;
	a3+=b3;

	vsum[i+0*gws] = a0;
	vsum[i+1*gws] = a1;
	vsum[i+2*gws] = a2;
	vsum[i+3*gws] = a3;

	// Detto approccio Slinding Window
}
/* Esempio per 4x4 (32 caselle)
[_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_]
 0 	1  2  3  4  5  6  7  8  9  A  B  C  D  E  F/\0 	1  2  3  4  5  6  7  8  9  A  B  C  D  E  F
*/

kernel void vecsum4x2(global int4 * restrict vsum, global const int4 * restrict v1, global const int4 * restrict v2, int noct)
{
	const int i = get_global_id(0);
	const int gws = get_global_size(0);

	if (i >= noct) return;

	int4 a0 = v1[i+0*gws];
	int4 a1 = v1[i+1*gws];

	int4 b0 = v2[i+0*gws];
	int4 b1 = v2[i+1*gws];

	a0+=b0;
	a1+=b1;

	vsum[i+0*gws] = a0;
	vsum[i+1*gws] = a1;
}