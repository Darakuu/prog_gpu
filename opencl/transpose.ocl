kernel void transpose(
  global int restrict *T,
  global const int *restrict A, 
  int nrows_T, int ncols_T) //Trasporre una matrice
{
  const int r_T = get_global_id(1);
  const int c_T = get_global_id(0);

  if(c_T>=ncols_T) return;
  if(r_T>=nrows_T) return;

  const int r_A = c_T;
  const int c_A = r_T;
  const int ncols_A = nrows_T;

  // T[c_A*nrows_A + r_A]
  T[r_T*ncols_T + c_T] = A[r_A*ncols_A + c_A];   // matrice trasposta
}

kernel void transpose2(
  global int2 restrict *T,
  global const int2 *restrict A,
  // assunzione che nrows_T e ncols_T sono multipli di 4 
  int nrows_A, int ncols_A)
{
  const int nvcols_A = ncols_A/2; // precalcoliamo lo stride per non dividere più volte
  const int nvcols_T = nrows_A/2;

  const int r2_A = get_global_id(1);  // da 0 a ncols_A/2
  const int c2_A = get_global_id(0);  // da 0 a nrows_A/2


  if(c2_A>=nvcols_A) return;
  if(r2_A>=nrows_A/2) return;

  const int2 v0 = A[(2*r2_A+0)*(nvcols_A) + c2_A];
  const int2 v1 = A[(2*r2_A+1)*(nvcols_A) + c2_A];  

  const int2 w0 = (int2)(v0.x, v1.x); 
  const int2 w1 = (int2)(v0.y, v1.y); // seconda colonna scritta su seconda riga

  T[(2*r2_T+0)*nvcols_T +c2_T] = w0;
  T[(2*r2_T+1)*nvcols_T +c2_T] = w1;
}

kernel void transpose4(
  global int2 restrict *T,
  global const int2 *restrict A,
  // assunzione che nrows_T e ncols_T sono multipli di 4 
  int nrows_A, int ncols_A)
{
  const int nvcols_A = ncols_A/4; // precalcoliamo lo stride per non dividere più volte
  const int nvcols_T = nrows_A/4;

  const int r4_A = get_global_id(1);  // da 0 a ncols_A/4
  const int c4_A = get_global_id(0);  // da 0 a nrows_A/4


  if(c4_A>=nvcols_A) return;
  if(r4_A>=nrows_A/4) return;

  const int4 v0 = A[(4*r4_A+0)*(nvcols_A) + c4_A];
  const int4 v1 = A[(4*r4_A+1)*(nvcols_A) + c4_A];
  const int4 v2 = A[(4*r4_A+2)*(nvcols_A) + c4_A];
  const int4 v3 = A[(4*r4_A+3)*(nvcols_A) + c4_A];  

  const int4 w0 = (int4)(v0.x, v1.x, v2.x, v3.x); 
  const int4 w1 = (int4)(v0.y, v1.y, v2.y, v3.y); // seconda colonna scritta su seconda riga
  const int4 w2 = (int4)(v0.z, v1.z, v2.z, v3.z); 
  const int4 w3 = (int4)(v0.w, v1.w, v2.w, v3.w); // seconda colonna scritta su seconda riga

  T[(4*r4_T+0)*nvcols_T +c4_T] = w0;
  T[(4*r4_T+1)*nvcols_T +c4_T] = w1;
}